// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deck deck
//
// swagger:model deck
type Deck struct {

	// flashcards
	Flashcards []*Flashcard `json:"flashcards"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// url
	// Required: true
	// Min Length: 1
	URL *string `json:"url"`
}

// Validate validates this deck
func (m *Deck) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlashcards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deck) validateFlashcards(formats strfmt.Registry) error {

	if swag.IsZero(m.Flashcards) { // not required
		return nil
	}

	for i := 0; i < len(m.Flashcards); i++ {
		if swag.IsZero(m.Flashcards[i]) { // not required
			continue
		}

		if m.Flashcards[i] != nil {
			if err := m.Flashcards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flashcards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Deck) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.MinLength("url", "body", string(*m.URL), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deck) UnmarshalBinary(b []byte) error {
	var res Deck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
